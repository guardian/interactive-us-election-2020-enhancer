{"version":3,"file":"main.css","sources":["main.scss","_mq.scss","../../node_modules/sass-mq/_mq.scss","_fonts.scss","guss-typography/_typography.scss","guss-typography/_typography.config.scss","guss-typography/_typography.helpers.scss","guss-typography/_typography.mixins.scss","_palette.sass"],"sourcesContent":["@import \"mq\";\n@import \"fonts\";\n@import \"palette\";\n\n// Uncomment for embeds\n//@import \"embed\";\n// Uncomment for full screen (including immersive article main media)\n//@import \"fullscreen\";\n\n.element-atom,\n.interactive-atom {\n    // margin: 0;\n}\n\n.content {\n    background-color: #fbf6ef;\n}\n\n\n// .content__headline {\n//     font-weight: 700;\n//     @include mq(desktop) {\n//     @include fs-titlepiece(1);\n//     font-size: 50px;\n//     line-height: 50px;\n    \n//     @include mq(leftCol) {\n//             &:before {\n//                 content: '';\n//                 display: block;\n//                 background-image: url('https://interactive.guim.co.uk/atoms/2020/09/election-enhancer-2020/v/1600342358561/assets/vote-for-header.svg');\n//                 background-repeat: no-repeat;\n//                 width: 600px;\n//                 height: 279px;\n//                 margin-left: -10px;\n//                 margin-top: 40px;\n//                 border-bottom: 1px solid $neutral-86;\n//             }\n//         }\n//     }\n// }\n\n.content__headline {\n      @include fs-titlepiece(1);\n  font-size: 36px;\n  position: relative;\n  padding-top: 0;\n  max-width: 620px;\n  @include mq(mobileMedium) {\n    @include fs-titlepiece(1);\n  }\n\n  @include mq(tablet) {\n    @include fs-titlepiece(2);\n\n  }\n  @include mq(leftCol) {\n    padding-top: 10px;\n  }\n&::before {\n    content: \"\";\n    display: block;\n    background-image: url(\"https://interactive.guim.co.uk/atoms/2020/09/election-enhancer-2020/v/1600342358561/assets/header-image.png\");\n    background-repeat: no-repeat;\n    background-size: contain;\n    background-position: left 0px bottom 0px;\n    height: 58vw;\n    margin-left: 0px;\n    @include mq(tablet) {\n      border-top: 0;\n      margin-left: -20px;\n     \n    }\n\n    @include mq(desktop) {\n      width: 940px;\n      height: 372px;\n    }\n    @include mq(leftCol) {\n      width: 950px;\n      padding-bottom: 10px;\n      margin-left: -10px;\n      // padding-top: 10px;\n      background-position: left 0px bottom 0px;\n    }\n    @include mq(wide) {\n      width: 1030px;\n    }\n  }\n  &::after {\n    content: \"\";\n    width: calc(100% + 20px);\n    background-color: $neutral-replacement;\n    position: absolute;\n    height: 1px;\n    top: calc(58vw);\n    left: -10px;\n\n    @include mq(mobileLandscape) {\n      left: -20px;\n      width: calc(100% + 40px);\n    }\n\n    @include mq(tablet) {\n   \n    }\n    @include mq(desktop) {\n      width: 630px;\n         top: 372px;\n    }\n    @include mq(leftCol) {\n      left: -10px;\n      top: 392px;\n    }\n    @include mq(wide) {\n    }\n  }\n}\n\n.content--type-article .content__meta-container {\n    @include mq(leftCol) {\n        margin-top: -28px;\n    }\n}\n\nfigure.element.element--showcase {\n margin-left: 0; \n\n@include mq(tablet) {\n    width: 700px;\n}\n\n@include mq(desktop) {\n    width: 940px;\n}\n@include mq(leftCol) {\n    width: 950px;\n}\n@include mq(wide) {\n    width: 1030px;\n}\n}\n\n\n\n.u-responsive-ratio {\n    @include mq(leftCol) {\n    display: none;\n    }\n}","// To enable support for browsers that do not support @media queries,\n// (IE <= 8, Firefox <= 3, Opera <= 9) set $mq-responsive to false\n// Create a separate stylesheet served exclusively to these browsers,\n// meaning @media queries will be rasterized, relying on the cascade itself\n$mq-responsive: true;\n\n// Name your breakpoints in a way that creates a ubiquitous language\n// across team members. It will improve communication between\n// stakeholders, designers, developers, and testers.\n$mq-breakpoints: (\n    mobile:  320px,\n    mobileMedium: 375px,\n    tablet:  740px,\n    desktop: 980px,\n    leftCol: 1140px,\n    wide:    1300px,\n\n    // Tweakpoints\n    desktopAd: 810px,\n    mobileLandscape: 480px\n);\n\n// Define the breakpoint from the $mq-breakpoints list that should\n// be used as the target width when outputting a static stylesheet\n// (i.e. when $mq-responsive is set to 'false').\n$mq-static-breakpoint: desktop;\n\n// If you want to display the currently active breakpoint in the top\n// right corner of your site during development, add the breakpoints\n// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n// $mq-show-breakpoints: (mobile, mobileLandscape, tablet, desktop, wide);\n\n@import 'node_modules/sass-mq/mq';\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","@import 'guss-typography/_typography.scss';\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Light.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Light.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Light.ttf\") format(\"truetype\");\n    font-weight: 300;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-LightItalic.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-LightItalic.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-LightItalic.ttf\") format(\"truetype\");\n    font-weight: 300;\n    font-style: italic;\n}\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Regular.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Regular.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Regular.ttf\") format(\"truetype\");\n    font-weight: 400;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-RegularItalic.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-RegularItalic.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-RegularItalic.ttf\") format(\"truetype\");\n    font-weight: 400;\n    font-style: italic;\n}\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Medium.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Medium.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Medium.ttf\") format(\"truetype\");\n    font-weight: 500;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-MediumItalic.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-MediumItalic.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-MediumItalic.ttf\") format(\"truetype\");\n    font-weight: 500;\n    font-style: italic;\n}\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Semibold.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Semibold.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Semibold.ttf\") format(\"truetype\");\n    font-weight: 600;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-SemiboldItalic.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-SemiboldItalic.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-SemiboldItalic.ttf\") format(\"truetype\");\n    font-weight: 600;\n    font-style: italic;\n}\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Bold.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Bold.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Bold.ttf\") format(\"truetype\");\n    font-weight: 700;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-BoldItalic.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-BoldItalic.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-BoldItalic.ttf\") format(\"truetype\");\n    font-weight: 700;\n    font-style: italic;\n}\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Black.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Black.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-Black.ttf\") format(\"truetype\");\n    font-weight: 900;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: \"Guardian Headline Full\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-BlackItalic.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-BlackItalic.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GHGuardianHeadline-BlackItalic.ttf\") format(\"truetype\");\n    font-weight: 900;\n    font-style: italic;\n}\n\n@font-face {\n    font-family: \"Guardian Titlepiece\";\n    src: url(\"https://interactive.guim.co.uk/fonts/garnett/GTGuardianTitlepiece-Bold.woff2\") format(\"woff2\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GTGuardianTitlepiece-Bold.woff\") format(\"woff\"),\n    url(\"https://interactive.guim.co.uk/fonts/garnett/GTGuardianTitlepiece-Bold.ttf\") format(\"truetype\");\n    font-weight: 700;\n    font-style: normal;\n}\n","// these are modified versions of the base guss-typography files\n\n@import '_typography.config';\n@import '_typography.helpers';\n@import '_typography.mixins';\n","/**\n * Data font stack\n *\n * @group typography\n */\n$f-data: 'Guardian Agate Sans 1 Web', 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif !default;\n\n/**\n * Serif font stack\n *\n * @group typography\n */\n$f-serif-text: 'Guardian Text Egyptian Web', Georgia, serif !default;\n\n/**\n * Headline font stack\n *\n * @group typography\n */\n$f-serif-headline: 'Guardian Headline', 'Guardian Egyptian Web', 'Guardian Headline Full', Georgia, serif !default;\n\n$f-headline-full: 'Guardian Headline', 'Guardian Headline Full', 'Guardian Egyptian Web', Georgia, serif !default;\n\n$f-titlepiece: 'Guardian Titlepiece', 'Guardian Headline Full', 'Guardian Headline', 'Guardian Egyptian Web', Georgia, serif !default;\n/**\n * Sans serif text font stack\n *\n * @group typography\n */\n$f-sans-serif-text: 'Guardian Text Sans Web', 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif !default;\n\n/**\n * Sans serif headline font stack\n *\n * @group typography\n */\n$f-sans-serif-headline: 'Guardian Sans Web', 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif !default;\n\n/**\n * Default font scale settings\n * See font-scale.html and font-scale.png for visual representations\n *\n * @group typography\n */\n$font-scale: (\n    titlepiece: (\n        1: (font-size: 40, line-height: 44),\n        2: (font-size: 44, line-height: 48),\n        3: (font-size: 48, line-height: 52),\n        4: (font-size: 52, line-height: 56),\n        5: (font-size: 56, line-height: 60),\n    ),\n    header: (\n        1: (font-size: 16, line-height: 20),\n        2: (font-size: 18, line-height: 24),\n        3: (font-size: 20, line-height: 24),\n        4: (font-size: 22, line-height: 28),\n        5: (font-size: 24, line-height: 28),\n    ),\n    headline: (\n        1: (font-size: 14, line-height: 18),\n        2: (font-size: 16, line-height: 20),\n        3: (font-size: 20, line-height: 24),\n        4: (font-size: 24, line-height: 28),\n        5: (font-size: 28, line-height: 32),\n        6: (font-size: 32, line-height: 36),\n        7: (font-size: 36, line-height: 40),\n        8: (font-size: 40, line-height: 44),\n        9: (font-size: 44, line-height: 48),\n    ),\n    bodyHeading: (\n        1: (font-size: 14, line-height: 22),\n        2: (font-size: 16, line-height: 24),\n        3: (font-size: 18, line-height: 28),\n        4: (font-size: 20, line-height: 28),\n    ),\n    bodyCopy: (\n        1: (font-size: 14, line-height: 20),\n        2: (font-size: 16, line-height: 24),\n        3: (font-size: 18, line-height: 28),\n    ),\n    data: (\n        1: (font-size: 11, line-height: 14),\n        2: (font-size: 12, line-height: 14),\n        3: (font-size: 13, line-height: 16),\n        4: (font-size: 14, line-height: 18),\n        5: (font-size: 16, line-height: 20),\n        6: (font-size: 18, line-height: 22),\n    ),\n    textSans: (\n        1: (font-size: 12, line-height: 16),\n        2: (font-size: 13, line-height: 18),\n        3: (font-size: 14, line-height: 20),\n        4: (font-size: 14, line-height: 22),\n    )\n) !default;\n","// Font scale helpers\n// =============================================================================\n\n/**\n * Grab all levels of a font the font-scale\n *\n * @param {String} $name - Name of the font-scale matrix (eg: headline)\n * @param {Map} $font-scale ($font-scale)\n *\n * @example\n *  font-size: get-scale(header);\n *\n * @requires {variable} $font-scale\n *\n * @return {Map}\n *\n * @group typography\n */\n@function get-scale($name, $font-scale: $font-scale) {\n    @return map-get($font-scale, $name);\n}\n\n/**\n * Grab info for a particular level of a font-scale\n *\n * @param {String} $name - Name of the font-scale in the matrix (eg: headline)\n * @param {Number} $level - Level in the matrix\n * @param {Map} $font-scale ($font-scale)\n *\n * @example\n *  font-size: get-scale-level(header, 1);\n *\n * @requires {variable} $font-scale\n * @requires {function} get-scale\n *\n * @return {Map}\n *\n * @group typography\n */\n@function get-scale-level($name, $level, $font-scale: $font-scale) {\n    @return map-get(get-scale($name, $font-scale), $level);\n}\n\n/**\n * Get a font-size for a level in the font-scale matrix\n *\n * @param {String} $name - Name of the font-scale in the matrix (eg: headline)\n * @param {Number} $level - Level in the matrix\n * @param {Map} $font-scale - Configuration\n *\n * @example\n *  font-size: get-font-size(header, 3);\n *\n * @requires {variable} $font-scale\n * @requires {function} convert-to-px\n * @requires {function} get-scale-level\n *\n * @return {Number}\n *\n * @group typography\n */\n@function get-font-size($name, $level, $font-scale: $font-scale) {\n    @return convert-to-px(map-get(get-scale-level($name, $level, $font-scale), font-size));\n}\n\n/**\n * Get a line-height for a level in the font-scale matrix\n *\n * @param {String} $name - Name of the font-scale in the matrix (eg: headline)\n * @param {Number} $level - Level in the matrix\n * @param {Map} $font-scale - Configuration\n *\n * @example\n *  font-size: get-line-height(header, 3);\n *\n * @requires {variable} $font-scale\n * @requires {function} convert-to-px\n * @requires {function} get-scale-level\n *\n * @return {Number}\n *\n * @group typography\n */\n@function get-line-height($name, $level, $font-scale: $font-scale) {\n    @return convert-to-px(map-get(get-scale-level($name, $level, $font-scale), line-height));\n}\n\n/**\n * Turn any value into pixels\n *\n * @param {Number} $value\n *\n * @example\n *  font-size: convert-to-px(14); // 14px\n *\n * @return {Number}\n *\n * @group typography\n */\n@function convert-to-px($value) {\n    @if (type-of($value) == number and $value != 0) {\n        $value: if(unitless($value), $value * 1px, $value);\n    }\n    @return $value;\n}\n","// Default type settings\n// =============================================================================\n\n/**\n * Default typography settings, to be included as soon as possible in the HTML\n * 1. Make type rendering look crisper\n * 2. Set relative line spacing to 1.5 (16px * 1.5 = 24px)\n *\n * @param {String} $font-family ($f-serif-text) - Default global font\n *\n * @requires {variable} $f-serif-text\n *\n * @group typography\n */\n\n@mixin guss-typography-defaults($font-family: $f-serif-text) {\n    @at-root {\n        html {\n            font-family: $font-family;\n            -moz-osx-font-smoothing: grayscale;\n            /* 1 */\n            -webkit-font-smoothing: antialiased;\n            /* 1 */\n        }\n        body {\n            line-height: 1.5;\n            /* 2 */\n        }\n    }\n}\n\n\n// Shorthands for font declarations\n// =============================================================================\n\n/**\n * Font-size and line-height shorthand\n *\n * @param {Number} $size\n * @param {Number} $line-height ($size)\n *\n * @example\n *  @include font-size(18, 24);\n *\n * @requires {function} convert-to-px\n *\n * @group typography\n */\n\n@mixin font-size($size, $line-height: $size) {\n    font-size: convert-to-px($size);\n    line-height: convert-to-px($line-height);\n}\n\n\n/**\n * Font styling shorthand  \n * Note: prefer the usage of the font-scale mixins to stick to the font scale\n *\n * @param {String} $family\n * @param {String} $weight\n * @param {Number} $size\n * @param {Number} $line-height ($size)\n *\n * @example\n *  @include font(arial, bold, 18, 24);\n *\n * @requires {mixin} font-size\n *\n * @group typography\n */\n\n@mixin font($family, $weight, $size, $line-height: $size) {\n    font-family: $family;\n    font-weight: $weight;\n    @include font-size($size, $line-height);\n}\n\n\n// Font scale\n// =============================================================================\n// Prefixes:\n// f- stands for Font: use to set a font-family only\n// fs- for Font Scale: documented in font-scale.png\n\n/**\n * Header family and weight properties.\n *\n * @requires {variable} $f-serif-headline\n *\n * @group typography\n */\n\n@mixin f-header {\n    font-family: $f-serif-headline;\n    font-weight: 900;\n}\n\n\n/**\n * Header typography settings.\n *\n * @param {Number} $level\n * @param {Boolean} $size-only\n *\n * @example\n *  // Output all properties (font-size, line-height, family, weight)\n *  @include fs-header(3);\n *  \n *  // Output font-size and line-height only\n *  @include fs-header(3, $size-only: true);\n *\n * @requires {function} get-font-size\n * @requires {function} get-line-height\n * @requires {mixin} font-size\n * @requires {mixin} f-header\n *\n * @group typography\n */\n\n@mixin fs-header($level, $size-only: false) {\n    @include font-size(get-font-size(header, $level), get-line-height(header, $level));\n\n    @if $size-only==false {\n        @include f-header;\n    }\n}\n\n\n/**\n * Healdine family and weight properties.\n *\n * @requires {variable} $f-serif-headline\n *\n * @group typography\n */\n\n@mixin f-headline {\n    font-family: $f-serif-headline;\n    font-weight: normal;\n}\n\n@mixin f-headerFull {\n    font-family: $f-headline-full;\n    font-weight: bold;\n}\n\n@mixin f-titlepiece {\n    font-family: $f-titlepiece;\n    font-weight: bold;\n}\n\n\n/**\n * Headline typography settings.\n *\n * @param {Number} $level\n * @param {Boolean} $size-only\n *\n * @example\n *  // Output all properties (font-size, line-height, family, weight)\n *  @include fs-headline(3);\n *  \n *  // Output font-size and line-height only\n *  @include fs-headline(3, $size-only: true);\n *\n * @requires {function} get-font-size\n * @requires {function} get-line-height\n * @requires {mixin} font-size\n * @requires {mixin} f-headline\n *\n * @group typography\n */\n\n@mixin fs-headline($level, $size-only: false) {\n    @include font-size(get-font-size(headline, $level), get-line-height(headline, $level));\n\n    @if $size-only==false {\n        @include f-headline;\n    }\n}\n\n@mixin fs-GuardianHeadlineFull($level, $lining-nums: true) {\n    @include font-size(get-font-size(header, $level), get-line-height(header, $level));\n    @include f-headerFull;\n\n    @if $lining-nums==true  {\n        font-variant-numeric: lining-nums;\n      -moz-font-feature-settings: \"lnum\";\n      -webkit-font-feature-settings: \"lnum\";\n      font-feature-settings: \"lnum\";\n    }\n}\n\n@mixin fs-titlepiece($level, $size-only: false) {\n    @include font-size(get-font-size(titlepiece, $level), get-line-height(titlepiece, $level));\n\n    @if $size-only==false {\n        @include f-titlepiece;\n        font-variant-numeric: lining-nums;\n      -moz-font-feature-settings: \"lnum\";\n      -webkit-font-feature-settings: \"lnum\";\n      font-feature-settings: \"lnum\";\n    }\n}\n\n/**\n * Body Heading family and weight properties.\n *\n * @requires {variable} $f-serif-text\n *\n * @group typography\n */\n\n@mixin f-bodyHeading {\n    font-family: $f-serif-text;\n    font-weight: bold;\n}\n\n\n/**\n * Body Heading typography settings.\n *\n * @param {Number} $level\n * @param {Boolean} $size-only\n *\n * @example\n *  // Output all properties (font-size, line-height, family, weight)\n *  @include fs-bodyHeading(3);\n *  \n *  // Output font-size and line-height only\n *  @include fs-bodyHeading(3, $size-only: true);\n *\n * @requires {function} get-font-size\n * @requires {function} get-line-height\n * @requires {mixin} font-size\n * @requires {mixin} f-bodyHeading\n *\n * @group typography\n */\n\n@mixin fs-bodyHeading($level, $size-only: false) {\n    @include font-size(get-font-size(bodyHeading, $level), get-line-height(bodyHeading, $level));\n\n    @if $size-only==false {\n        @include f-bodyHeading;\n    }\n}\n\n\n/**\n * Body Copy family property.\n *\n * @requires {variable} $f-serif-text\n *\n * @group typography\n */\n\n@mixin f-bodyCopy {\n    font-family: $f-serif-text;\n}\n\n\n/**\n * Body Copy typography settings.\n *\n * @param {Number} $level\n * @param {Boolean} $size-only\n *\n * @example\n *  // Output all properties (font-size, line-height, family)\n *  @include fs-bodyCopy(3);\n *  \n *  // Output font-size and line-height only\n *  @include fs-bodyCopy(3, $size-only: true);\n *\n * @requires {function} get-font-size\n * @requires {function} get-line-height\n * @requires {mixin} font-size\n * @requires {mixin} f-bodyCopy\n *\n * @group typography\n */\n\n@mixin fs-bodyCopy($level, $size-only: false) {\n    @include font-size(get-font-size(bodyCopy, $level), get-line-height(bodyCopy, $level));\n\n    @if $size-only==false {\n        @include f-bodyCopy;\n    }\n}\n\n\n/**\n * Data family property.\n *\n * @requires {variable} $f-data\n *\n * @group typography\n */\n\n@mixin f-data {\n    font-family: $f-data;\n}\n\n\n/**\n * Data typography settings.\n *\n * @param {Number} $level\n * @param {Boolean} $size-only\n *\n * @example\n *  // Output all properties (font-size, line-height, family)\n *  @include fs-data(3);\n *  \n *  // Output font-size and line-height only\n *  @include fs-data(3, $size-only: true);\n *\n * @requires {function} get-font-size\n * @requires {function} get-line-height\n * @requires {mixin} font-size\n * @requires {mixin} f-data\n *\n * @group typography\n */\n\n@mixin fs-data($level, $size-only: false) {\n    @include font-size(get-font-size(data, $level), get-line-height(data, $level));\n\n    @if $size-only==false {\n        @include f-data;\n    }\n}\n\n\n/**\n * Text Sans family property.\n *\n * @requires {variable} $f-sans-serif-text\n *\n * @group typography\n */\n\n@mixin f-textSans {\n    font-family: $f-sans-serif-text;\n}\n\n\n/**\n * Text Sans typography settings.\n *\n * @param {Number} $level\n * @param {Boolean} $size-only\n *\n * @example\n *  // Output all properties (font-size, line-height, family)\n *  @include fs-textSans(3);\n *  \n *  // Output font-size and line-height only\n *  @include fs-textSans(3, $size-only: true);\n *\n * @requires {function} get-font-size\n * @requires {function} get-line-height\n * @requires {mixin} font-size\n * @requires {mixin} f-textSans\n *\n * @group typography\n */\n\n@mixin fs-textSans($level, $size-only: false) {\n    @include font-size(get-font-size(textSans, $level), get-line-height(textSans, $level));\n\n    @if $size-only==false {\n        @include f-textSans;\n    }\n}\n\n\n/**\n * Headline Sans family property.  \n * Is not currently integrated into our font scale matrix,\n * hence no `fs-` mixin; currently we're just using it as a\n * replacement font in a few places.\n *\n * @requires {variable} $f-sans-serif-headline\n *\n * @group typography\n */\n\n@mixin f-headlineSans {\n    font-family: $f-sans-serif-headline;\n}","// Pillars //\n$news-main: #c70000;\n$news-dark: #880105;\n$news-bright: #ff4e36;\n$news-pastel: #ffbac8;\n$news-faded: #fff4f2;\n\n$opinion-main: #e05e00;\n$opinion-dark: #bd5318;\n$opinion-bright: #ff7f0f;\n$opinion-pastel: #f9b376;\n$opinion-faded: #fef9f5;\n\n$sport-main:  #0084c6;\n$sport-dark: #005689;\n$sport-bright: #00b2ff;\n$sport-pastel: #90dcff;\n$sport-faded: #f1f8fc;\n\n$culture-main: #a1845c;\n$culture-dark: #6b5840;\n$culture-bright: #eacca0;\n$culture-pastel: #e7d4b9;\n$culture-faded: #fbf6ef;\n\n$lifestyle-main: #bb3b80;\n$lifestyle-dark: #7d0068;\n$lifestyle-bright: #ffabdb;\n$lifestyle-pastel: #fec8d3;\n$lifestyle-faded: #feeef7;\n\n// Neutral //\n$neutral-7: #121212;\n$neutral-20: #333333;\n$neutral-46: #767676;\n$neutral-60: #999999;\n$neutral-86: #dcdcdc;\n$neutral-92: #eaeaea;\n$neutral-96: #f6f6f6;\n$neutral-100: #ffffff;\n\n// Brand //\n$brand-main: #052962;\n$brand-dark: #041f4a;\n$brand-pastel: #506991;\n\n// Highlight //\n$highlight-main: #ffe500;\n$highlight-dark: #ffbb50;\n\n// Other //\n$special-dark: #3f464a;\n$labs-main: #69d1ca;\n$labs-dark: #65a897;\n$green-main: #3db540;\n$green-dark: #236925;\n$live-red: #ae0000;\n\n\n\n// Election specific //\n$biden-blue: #25428F;\n$neutral-replacement: #dbd8ce;\n"],"names":[],"mappings":"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"}